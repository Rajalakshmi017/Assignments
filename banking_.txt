use day2;
use bankingSystem;
insert into customer(first_name,last_name,dob,customer_id) values 
('harry','potter','2002-03-21',1),
('ronald','weasley','2001-02-10',2),
('hermione','granger','2002-11-15',3);

select*from customer;

insert into account(account_type,balance,account_id,customer_id) values 
('savings',50000,1,1) ,
('current',120000,2,2) ,
('zero_balance',100000,3,3),
('current',150000,4,1) ,
('savings',30000,5,3);
select*from account;
insert into transaction(transaction_type,amount,transaction_date,account_id) 
values 
('deposit', 10000, '2024-02-01',1),
('withdrawal', 5000, '2024-02-02',1),
('deposit', 20000, '2024-02-02',2),
('withdrawal', 8000, '2024-02-02',3),
('transfer', 20000, '2024-02-01',4),
('transfer', 7000, '2024-02-05',5);
select*from transaction;
-- 1. Retrieve the name, account type, and email of all customers
SELECT c.first_name || ' ' || c.last_name AS full_name, a.account_type
FROM customer c
JOIN account a ON c.customer_id = a.customer_id;
/*
0	savings
0	current
0	zero_balance
0	current
0	savings*/


-- 2. List all transactions corresponding to each customer
SELECT c.first_name || ' ' || c.last_name AS full_name, t.transaction_type, t.amount, t.transaction_date
FROM customer c
JOIN account a ON c.customer_id = a.customer_id
JOIN transaction t ON a.account_id = t.account_id;
/*
0	deposit	10000	2024-02-01
0	withdrawal	5000	2024-02-02
0	transfer	20000	2024-02-01
0	deposit	20000	2024-02-02
0	withdrawal	8000	2024-02-02
0	transfer	7000	2024-02-05
*/
-- 3. Increase the balance of a specific account by a certain amount
UPDATE account
SET balance = balance + 5000
WHERE account_id = 1;
/*3	226	20:57:19	UPDATE account
 SET balance = balance + 5000
 WHERE account_id = 1	1 row(s) affected
 Rows matched: 1  Changed: 1  Warnings: 0	0.000 sec*/
 
-- 4. Combine first and last names of customers as a full_name
SELECT first_name || ' ' || last_name AS full_name
FROM customer;
/*0
0
0*/
-- 5. Remove accounts with a balance of zero where the account type is savings
DELETE FROM account
WHERE balance = 0 AND account_type = 'savings';

-- 6. Find customers living in a specific city
SELECT *
FROM customer
WHERE city = 'specified_city';

-- 7. Get the account balance for a specific account
SELECT balance
FROM account
WHERE account_id = 2;
-- 120000

-- 8. List all current accounts with a balance greater than $1,000
SELECT *
FROM account
WHERE account_type = 'current' AND balance > 1000;
/* current	120000	2	2
current	150000	4	1
			*/
-- 9. Retrieve all transactions for a specific account
SELECT *
FROM transaction
WHERE account_id = 3;
/*withdrawal	8000	2024-02-02	3*/

-- 10. Calculate the interest accrued on savings accounts based on a given interest rate
SELECT account_id, balance * interest_rate AS interest_accrued
FROM account
WHERE account_type = 'savings';

-- 11. Identify accounts where the balance is less than a specified overdraft limit
SELECT *
FROM account
WHERE balance < 10000;

-- 12. Find customers not living in a specific city
SELECT *
FROM customer
WHERE city != 'specified_city';

-- Task 3
-- Find the average account balance for all customers.
SELECT AVG(balance) AS average_balance
FROM account;
-- 90000

-- Write a SQL query to Retrieve the top 10 highest account balances.
SELECT *FROM account ORDER BY balance DESC LIMIT 10;
/*
current	150000	4	1
current	120000	2	2
zero_balance	100000	3	3
savings	50000	1	1
savings	30000	5	3
			*/
-- 3. Write a SQL query to Calculate Total Deposits for All Customers in specific date.
SELECT SUM(t.amount) AS total_deposits
FROM transaction t
JOIN account a ON t.account_id = a.account_id
WHERE t.transaction_type = 'deposit'
AND t.transaction_date = '2024-02-02';
-- 20000
-- 4.Write a SQL query to Find the Oldest and Newest Customers.
SELECT 
    MIN(dob) AS oldest_customer_dob,
    MAX(dob) AS newest_customer_dob
FROM 
    customer;
    -- 2001-02-10	2002-11-15
--  5. Write a SQL query to Retrieve transaction details along with the account type.
SELECT 
    t.account_id AS transaction_id,
    t.transaction_type,
    t.amount,
    t.transaction_date,
    a.account_type
FROM 
    transaction t
JOIN 
    account a ON t.account_id = a.account_id;
    /*
    1	deposit	10000	2024-02-01	savings
1	withdrawal	5000	2024-02-02	savings
2	deposit	20000	2024-02-02	current
3	withdrawal	8000	2024-02-02	zero_balance
4	transfer	20000	2024-02-01	current
5	transfer	7000	2024-02-05	savings*/
-- 6. Write a SQL query to Get a list of customers along with their account details.
SELECT 
    c.customer_id AS customer_id,
    c.first_name,
    c.last_name,
    c.dob,
    a.account_id AS account_id,
    a.account_type,
    a.balance
FROM 
    customer c
JOIN 
    account a ON c.customer_id = a.customer_id;
/*
1	harry	potter	2002-03-21	1	savings	50000
2	ronald	weasley	2001-02-10	2	current	120000
3	hermione	granger	2002-11-15	3	zero_balance	100000
1	harry	potter	2002-03-21	4	current	150000
3	hermione	granger	2002-11-15	5	savings	30000 */
-- 7. Write a SQL query to Retrieve transaction details along with customer information for a specific account.
SELECT 
    t.account_id AS transaction_id,
    t.transaction_type,
    t.amount,
    t.transaction_date,
    c.customer_id AS customer_id,
    c.first_name,
    c.last_name
FROM 
    transaction t
JOIN 
    account a ON t.account_id = a.account_id
JOIN 
    customer c ON a.customer_id = c.customer_id
WHERE 
    a.account_id = 2;
/*
2	deposit	20000	2024-02-02	2	ronald	weasley*/
-- 8. Write a SQL query to Identify customers who have more than one account.
SELECT 
    c.customer_id AS customer_id,
    c.first_name,
    c.last_name
FROM 
    customer c
JOIN 
    account a ON c.customer_id = a.customer_id
GROUP BY 
    c.customer_id
HAVING 
    COUNT(a.account_id) > 1;
/*
1	harry	potter
3	hermione	granger*/
-- 9. Write a SQL query to Calculate the difference in transaction amounts between deposits and withdrawals.
SELECT 
    SUM(CASE WHEN t.transaction_type = 'deposit' THEN t.amount ELSE -t.amount END) AS net_transaction_amount
FROM 
    transaction t;
    -- -10000
    
-- 10. Write a SQL query to Calculate the average daily balance for each account over a specified period.
SELECT 
    account_id,
    AVG(balance) AS average_daily_balance
FROM 
    (
        SELECT 
            account_id,
            DATE(transaction_date) AS transaction_date,
            SUM(CASE WHEN transaction_type = 'deposit' THEN amount ELSE -amount END) AS balance
        FROM 
            transaction
        GROUP BY 
            account_id,
            DATE(transaction_date)
    ) AS daily_balances
GROUP BY 
    account_id;
    /*
    1	2500
2	20000
3	-8000
4	-20000
5	-7000*/
-- 11.Calculate the total balance for each account type:
SELECT 
    account_type,
    SUM(balance) AS total_balance
FROM 
    account
GROUP BY 
    account_type;
    /*
    current	270000
savings	80000
zero_balance	100000*/

-- 12.Identify accounts with the highest number of transactions order by descending order:
SELECT 
    account_id,
    COUNT(*) AS transaction_count
FROM 
    transaction
GROUP BY 
    account_id
ORDER BY 
    COUNT(*) DESC;
    /*
    1	2
2	1
3	1
4	1
5	1*/
-- 13.List customers with high aggregate account balances, along with their account types:
SELECT 
    c.customer_id AS customer_id,
    c.first_name,
    c.last_name,
    a.account_type,
    SUM(a.balance) AS aggregate_balance
FROM 
    customer c
JOIN 
    account a ON c.customer_id = a.customer_id
GROUP BY 
    c.customer_id, a.account_type
HAVING 
    SUM(a.balance) >  30000 ;
    /*
    1	harry	potter	current	150000
1	harry	potter	savings	50000
2	ronald	weasley	current	120000
3	hermione	granger	zero_balance	100000*/
-- 14.Identify and list duplicate transactions based on transaction amount, date, and account:
SELECT 
    transaction_type,
    amount,
    transaction_date,
    account_id,
    COUNT(*) AS duplicate_count
FROM 
    transaction
GROUP BY 
    transaction_type, amount, transaction_date, account_id
HAVING 
    COUNT(*) > 1;
    -- no output
-- TASK 4
-- 1.Retrieve the customer(s) with the highest account balance:
SELECT 
    customer_id, first_name, last_name
FROM 
    customer
WHERE 
    customer_id = (
        SELECT 
            customer_id
        FROM 
            account
        ORDER BY 
            balance DESC
        LIMIT 1
    );
    /*1	harry	potter
		*/
-- 2.Calculate the average account balance for customers who have more than one account
SELECT 
    AVG(balance) AS average_balance
FROM 
    (
        SELECT 
            customer_id, COUNT(*) AS account_count
        FROM 
            account
        GROUP BY 
            customer_id
        HAVING 
            COUNT(*) > 1
    ) AS multi_account_customers
JOIN 
    account ON multi_account_customers.customer_id = account.customer_id;
    -- 82500
    
-- 3.Retrieve accounts with transactions whose amounts exceed the average transaction amount.
SELECT 
    a.account_id AS account_id,
    a.account_type,
    a.balance,
    t.amount AS transaction_amount
FROM 
    account a
JOIN 
    transaction t ON a.account_id = t.account_id
WHERE 
    t.amount > (SELECT AVG(amount) FROM transaction);
    /*
    2	current	120000	20000
4	current	150000	20000*/

-- 4.. Identify customers who have no recorded transactions.
SELECT 
    customer_id,
    first_name,
    last_name
FROM 
    customer
WHERE 
    customer_id NOT IN (SELECT DISTINCT customer_id FROM transaction)
LIMIT 0, 1000;

-- null

-- 5. Calculate the total balance of accounts with no recorded transactions.
SELECT 
    SUM(balance) AS total_balance_no_transactions
FROM 
    account
WHERE 
    account_id NOT IN (SELECT DISTINCT account_id FROM transaction);

-- 6. Retrieve transactions for accounts with the lowest balance.
SELECT 
    t.account_id AS transaction_id,
    t.transaction_type,
    t.amount,
    t.transaction_date,
    a.account_id AS account_id,
    a.account_type,
    a.balance
FROM 
    transaction t
JOIN 
    account a ON t.account_id = a.account_id
WHERE 
    a.balance = (SELECT MIN(balance) FROM account);
/* 5	transfer	7000	2024-02-05	5	savings	30000*/
-- 7. Identify customers who have accounts of multiple types.
SELECT 
    c.customer_id AS customer_id,
    c.first_name,
    c.last_name
FROM 
    customer c
JOIN 
    account a ON c.customer_id = a.customer_id
GROUP BY 
    c.customer_id
HAVING 
    COUNT(DISTINCT account_type) > 1;
    /*1	harry	potter
3	hermione	granger*/

-- 8. Calculate the percentage of each account type out of the total number of accounts.
SELECT 
    account_type,
    COUNT(*) AS account_count,
    ROUND((COUNT(*) * 100.0) / (SELECT COUNT(*) FROM account), 2) AS percentage
FROM 
    account
GROUP BY 
    account_type;
    /*
current	2	40.00
savings	2	40.00
zero_balance	1	20.00*/

-- 9. Retrieve all transactions for a customer with a given customer_id.
SELECT 
    t.account_id AS transaction_id,
    t.transaction_type,
    t.amount,
    t.transaction_date,
    a.account_type,
    a.balance
FROM 
    transaction t
JOIN 
    account a ON t.account_id = a.account_id
WHERE 
    a.customer_id = 2;
    /*2	deposit	20000	2024-02-02	current	120000*/

-- 10. Calculate the total balance for each account type, including a subquery within the SELECT clause.
SELECT 
    account_type,
    (SELECT SUM(balance) FROM account WHERE account_type = a.account_type) AS total_balance
FROM 
    account a
GROUP BY 
    account_type;
    /*current	270000
savings	80000
zero_balance	100000*/